@model TrashCollector.Models.Customer

@{
    ViewData["Title"] = "Create";
    Layout = "~/Views/Shared/_Layout.cshtml";
}

<h1>Welcome To TrashCollector!</h1>

<h4>Tell us about yourself</h4>
<hr />
<div class="row">
    <div class="col-md-4">
        <form asp-action="Create">
            <div asp-validation-summary="ModelOnly" class="text-danger"></div>
            <div class="form-group">
                <label asp-for="Name" class="control-label"></label>
                <input asp-for="Name" class="form-control" />
                <span asp-validation-for="Name" class="text-danger"></span>
            </div>

            <div class="form-group">
                <label asp-for="Address" class="control-label"></label>
                <input asp-for="Address" class="form-control" />
                <span asp-validation-for="Address" class="text-danger"></span>
            </div>

            <div id="locationField">
                <input id="autocomplete"
                       placeholder="Enter your address"
                       onFocus="geolocate()"
                       type="text" />
            </div>

            <div class="form-group">

                <label asp-for="ZipCode" class="control-label"></label>
                <input asp-for="ZipCode" class="form-control" />
                <span asp-validation-for="ZipCode" class="text-danger"></span>
            </div>

            <div class="form-group">
                <label asp-for="CollectionDay" class="control-label"></label>
                <select asp-for="CollectionDay" class="form-control" asp-items="Html.GetEnumSelectList<DayOfWeek>()">
                    <option value="">Choose your pickup day</option>
                </select>
            </div>

            <div class="form-group">
                <input type="submit" value="Submit" class="btn btn-primary" />
                <p>(You can change these later)</p>
            </div>
        </form>
    </div>
</div>
<script src="https://maps.googleapis.com/maps/api/js?key=AIzaSyCvPRFzP4Hn9CVHlFOzn30h7szAQIoUf4U=places&callback=initAutocomplete"
        async defer></script>
@*<div>
        <a asp-action="Index">Back to List</a>
    </div>*@

@section Scripts {
<script type="text/javascript" 
        src="https://maps.googleapis.com/maps/api/js?key=AIzaSyCvPRFzP4Hn9CVHlFOzn30h7szAQIoUf4U&libraries=places">

var placeSearch, autocomplete;

var componentForm = {
  street_number: 'short_name',
  route: 'long_name',
  locality: 'long_name',
  administrative_area_level_1: 'short_name',
  country: 'long_name',
  postal_code: 'short_name'
};

function initAutocomplete() {
  // Create the autocomplete object, restricting the search predictions to
  // geographical location types.
  autocomplete = new google.maps.places.Autocomplete(
      document.getElementById('autocomplete'), {types: ['geocode']});

  // Avoid paying for data that you don't need by restricting the set of
  // place fields that are returned to just the address components.
  autocomplete.setFields(['address_component']);

  // When the user selects an address from the drop-down, populate the
  // address fields in the form.
  autocomplete.addListener('place_changed', fillInAddress);
}

function fillInAddress() {
  // Get the place details from the autocomplete object.
  var place = autocomplete.getPlace();

  for (var component in componentForm) {
    document.getElementById(component).value = '';
    document.getElementById(component).disabled = false;
  }

  // Get each component of the address from the place details,
  // and then fill-in the corresponding field on the form.
  for (var i = 0; i < place.address_components.length; i++) {
    var addressType = place.address_components[i].types[0];
    if (componentForm[addressType]) {
      var val = place.address_components[i][componentForm[addressType]];
      document.getElementById(addressType).value = val;
    }
  }
}

// Bias the autocomplete object to the user's geographical location,
// as supplied by the browser's 'navigator.geolocation' object.
function geolocate() {
  if (navigator.geolocation) {
    navigator.geolocation.getCurrentPosition(function(position) {
      var geolocation = {
        lat: position.coords.latitude,
        lng: position.coords.longitude
      };
      var circle = new google.maps.Circle(
          {center: geolocation, radius: position.coords.accuracy});
      autocomplete.setBounds(circle.getBounds());
    });
  }
}
        google.maps.event.addDomListener(window, 'load', function () {
            var options = {
                types: ['(cities)'],
                componentRestrictions: { country: "in" }
            };

            var input = document.getElementById('Address');
            var places = new google.maps.places.Autocomplete(input, options);


        });
    </script>
    @{await Html.RenderPartialAsync("_ValidationScriptsPartial");}
}
